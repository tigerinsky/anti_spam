/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MainService_H
#define MainService_H

#include <thrift/TDispatchProcessor.h>
#include "service_types.h"

namespace cls {

class MainServiceIf {
 public:
  virtual ~MainServiceIf() {}
  virtual void AntiSpam( ::cls::AntiSpamResponse& _return, const  ::cls::AntiSpamRequest& request) = 0;
};

class MainServiceIfFactory {
 public:
  typedef MainServiceIf Handler;

  virtual ~MainServiceIfFactory() {}

  virtual MainServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MainServiceIf* /* handler */) = 0;
};

class MainServiceIfSingletonFactory : virtual public MainServiceIfFactory {
 public:
  MainServiceIfSingletonFactory(const boost::shared_ptr<MainServiceIf>& iface) : iface_(iface) {}
  virtual ~MainServiceIfSingletonFactory() {}

  virtual MainServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MainServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<MainServiceIf> iface_;
};

class MainServiceNull : virtual public MainServiceIf {
 public:
  virtual ~MainServiceNull() {}
  void AntiSpam( ::cls::AntiSpamResponse& /* _return */, const  ::cls::AntiSpamRequest& /* request */) {
    return;
  }
};

typedef struct _MainService_AntiSpam_args__isset {
  _MainService_AntiSpam_args__isset() : request(false) {}
  bool request :1;
} _MainService_AntiSpam_args__isset;

class MainService_AntiSpam_args {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};

  MainService_AntiSpam_args(const MainService_AntiSpam_args&);
  MainService_AntiSpam_args& operator=(const MainService_AntiSpam_args&);
  MainService_AntiSpam_args() {
  }

  virtual ~MainService_AntiSpam_args() throw();
   ::cls::AntiSpamRequest request;

  _MainService_AntiSpam_args__isset __isset;

  void __set_request(const  ::cls::AntiSpamRequest& val);

  bool operator == (const MainService_AntiSpam_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const MainService_AntiSpam_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MainService_AntiSpam_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MainService_AntiSpam_args& obj);
};


class MainService_AntiSpam_pargs {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};


  virtual ~MainService_AntiSpam_pargs() throw();
  const  ::cls::AntiSpamRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MainService_AntiSpam_pargs& obj);
};

typedef struct _MainService_AntiSpam_result__isset {
  _MainService_AntiSpam_result__isset() : success(false) {}
  bool success :1;
} _MainService_AntiSpam_result__isset;

class MainService_AntiSpam_result {
 public:

  static const char* ascii_fingerprint; // = "AE16B3B80C3AE2A38B3A45447ED828F6";
  static const uint8_t binary_fingerprint[16]; // = {0xAE,0x16,0xB3,0xB8,0x0C,0x3A,0xE2,0xA3,0x8B,0x3A,0x45,0x44,0x7E,0xD8,0x28,0xF6};

  MainService_AntiSpam_result(const MainService_AntiSpam_result&);
  MainService_AntiSpam_result& operator=(const MainService_AntiSpam_result&);
  MainService_AntiSpam_result() {
  }

  virtual ~MainService_AntiSpam_result() throw();
   ::cls::AntiSpamResponse success;

  _MainService_AntiSpam_result__isset __isset;

  void __set_success(const  ::cls::AntiSpamResponse& val);

  bool operator == (const MainService_AntiSpam_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MainService_AntiSpam_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MainService_AntiSpam_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MainService_AntiSpam_result& obj);
};

typedef struct _MainService_AntiSpam_presult__isset {
  _MainService_AntiSpam_presult__isset() : success(false) {}
  bool success :1;
} _MainService_AntiSpam_presult__isset;

class MainService_AntiSpam_presult {
 public:

  static const char* ascii_fingerprint; // = "AE16B3B80C3AE2A38B3A45447ED828F6";
  static const uint8_t binary_fingerprint[16]; // = {0xAE,0x16,0xB3,0xB8,0x0C,0x3A,0xE2,0xA3,0x8B,0x3A,0x45,0x44,0x7E,0xD8,0x28,0xF6};


  virtual ~MainService_AntiSpam_presult() throw();
   ::cls::AntiSpamResponse* success;

  _MainService_AntiSpam_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MainService_AntiSpam_presult& obj);
};

class MainServiceClient : virtual public MainServiceIf {
 public:
  MainServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MainServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void AntiSpam( ::cls::AntiSpamResponse& _return, const  ::cls::AntiSpamRequest& request);
  void send_AntiSpam(const  ::cls::AntiSpamRequest& request);
  void recv_AntiSpam( ::cls::AntiSpamResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MainServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<MainServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MainServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_AntiSpam(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MainServiceProcessor(boost::shared_ptr<MainServiceIf> iface) :
    iface_(iface) {
    processMap_["AntiSpam"] = &MainServiceProcessor::process_AntiSpam;
  }

  virtual ~MainServiceProcessor() {}
};

class MainServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MainServiceProcessorFactory(const ::boost::shared_ptr< MainServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MainServiceIfFactory > handlerFactory_;
};

class MainServiceMultiface : virtual public MainServiceIf {
 public:
  MainServiceMultiface(std::vector<boost::shared_ptr<MainServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MainServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MainServiceIf> > ifaces_;
  MainServiceMultiface() {}
  void add(boost::shared_ptr<MainServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void AntiSpam( ::cls::AntiSpamResponse& _return, const  ::cls::AntiSpamRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AntiSpam(_return, request);
    }
    ifaces_[i]->AntiSpam(_return, request);
    return;
  }

};

} // namespace

#endif
